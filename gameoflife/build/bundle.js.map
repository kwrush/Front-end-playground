{"version":3,"sources":["webpack:///webpack/bootstrap 2ac4c3aebd8ae49cd477","webpack:///./js/main.js","webpack:///./js/ui.js","webpack:///./js/game.js"],"names":["core","row","col","ui","game","speed","drawGrid","CELL_SIZE","ALIVE_CELL","DEAD_CELL","BORDER_COLOR","GameUI","options","rowNum","colNum","initCanvas","listen","canvas","document","getElementById","ctx","getContext","width","height","randBtn","startBtn","stopBtn","addEventListener","_handleClick","evt","_prepare","_play","_stop","strokeStyle","lineWidth","beginPath","i","moveTo","lineTo","j","stroke","closePath","window","event","preventDefault","stopPropagation","pageX","pageY","recDim","getBoundingClientRect","offsetX","left","offsetY","top","c","Math","floor","r","cell","getCellAt","alive","_fillCell","console","log","randomPattern","_drawCells","clearInterval","playTimer","setInterval","populate","_transition","nextGen","next","tile","x","y","status","w","size","fillStyle","fillRect","GameCore","cells","initCells","randomStatus","_nextStatus","hasOwnProperty","aliveNeighbors","_isCellAlive","push","round","random"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2ac4c3aebd8ae49cd477","import GameUI from './ui.js';\r\nimport GameCore from './game.js';\r\n\r\nlet core = new GameCore({\r\n    row: 50,\r\n    col: 70\r\n});\r\nlet ui = new GameUI(\r\n    {\r\n        game: core,\r\n        speed: 200\r\n    }\r\n);\r\n\r\nui.drawGrid();\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","const CELL_SIZE    = 12,       // tile size, in 'px'\r\n      ALIVE_CELL   = '#333',   // color of alive cell\r\n      DEAD_CELL    = '#fff',   // color of dead cell\r\n      BORDER_COLOR = '#333';\r\n\r\nclass GameUI {\r\n    constructor(options) {\r\n        this.game = options.game;\r\n        this.speed = options.speed || 100;\r\n\r\n        this.rowNum = this.game.row || 40;\r\n        this.colNum = this.game.col || 60;\r\n\r\n        this.initCanvas();\r\n        this.listen();\r\n    }\r\n\r\n    // init canvas properties\r\n    initCanvas() {\r\n        this.canvas = document.getElementById('game-grid');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.width = this.colNum * CELL_SIZE + 1;\r\n        this.canvas.height = this.rowNum * CELL_SIZE + 1;\r\n    }\r\n\r\n    // listen to DOM events\r\n    listen () {\r\n        this.randBtn  = document.getElementById('rand-pattern-btn');\r\n        this.startBtn = document.getElementById('start-btn');\r\n        this.stopBtn  = document.getElementById('stop-btn');\r\n\r\n        this.canvas.addEventListener('click', evt => this._handleClick(evt), false);\r\n        this.randBtn.addEventListener('click', evt => this._prepare(evt), false);\r\n        this.startBtn.addEventListener('click', evt => this._play(evt), false);\r\n        this.stopBtn.addEventListener('click', evt => this._stop(evt), false);\r\n    }\r\n\r\n    // Make grid\r\n    drawGrid() {\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n\r\n        // Draw horizontal lines\r\n        for (let i = 0; i <= this.rowNum; i++) {\r\n            this.ctx.moveTo(0, CELL_SIZE * i + 0.5);\r\n            this.ctx.lineTo(CELL_SIZE * this.colNum, CELL_SIZE * i + 0.5);\r\n        }\r\n\r\n        // Vertical lines\r\n        for (let j = 0; j <= this.colNum; j++) {\r\n            this.ctx.moveTo(CELL_SIZE * j + 0.5, 0);\r\n            this.ctx.lineTo(CELL_SIZE * j + 0.5, CELL_SIZE * this.colNum);\r\n        }\r\n\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    // Click in cell rectangle to toggle cell's status\r\n    _handleClick(evt) {\r\n        evt = evt || window.event;\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n\r\n        // Calculate the position of the cell being clicked\r\n        let pageX = evt.pageX;\r\n        let pageY = evt.pageY;\r\n\r\n        let recDim = this.canvas.getBoundingClientRect();\r\n\r\n        let offsetX = pageX - recDim.left;\r\n        let offsetY = pageY - recDim.top;\r\n\r\n        // Get row and column number of the tile\r\n        let c = Math.floor(offsetX / CELL_SIZE);\r\n        let r = Math.floor(offsetY / CELL_SIZE);\r\n\r\n        let cell = this.game.getCellAt(r, c);\r\n        cell.alive = !cell.alive;\r\n        this._fillCell(c, r, cell.alive);\r\n        // debug\r\n        console.log('r:' + r + '; c:' + c + '; alive: ' + cell.alive + '; index:' + (r * this.colNum + c));\r\n    }\r\n\r\n    // random pattern button callback\r\n    _prepare(evt) {\r\n        this.game.randomPattern();\r\n        this._drawCells();\r\n    }\r\n\r\n    // stop button callback\r\n    _stop(evt) {\r\n        clearInterval(this.playTimer);\r\n    }\r\n\r\n    // start button callback\r\n    _play(evt) {\r\n        this._stop();\r\n        this.playTimer = setInterval(() => {\r\n            // populate next generation\r\n            this.game.populate();\r\n            this._transition();\r\n        }, this.speed);\r\n    }\r\n\r\n    // Show next generation of cells\r\n    _transition () {\r\n        for (let r = 0; r < this.rowNum; r++) {\r\n            for (let c = 0; c < this.colNum; c++) {\r\n                let cell = this.game.getCellAt(r, c);\r\n                cell = this.game.nextGen(cell);\r\n                this._fillCell(c, r, cell.next);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Fill color in grid cells based on the pattern\r\n    _drawCells() {\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n\r\n        for (let r = 0; r < this.rowNum; r++) {\r\n            for (let c = 0; c < this.colNum; c++) {\r\n                let tile = this.game.getCellAt(r, c);\r\n\r\n                // row: top to bottom, col: left to right\r\n                // so x is col and y is row in canvas\r\n                this._fillCell(tile.col, tile.row, tile.alive);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Fill color in the given cell\r\n    _fillCell(x, y, status) {\r\n        let w = this.ctx.lineWidth;\r\n\r\n        x = x * CELL_SIZE;\r\n        y = y * CELL_SIZE;\r\n\r\n        x = x + w;\r\n        y = y + w;\r\n\r\n        let size = CELL_SIZE - w;\r\n\r\n        this.ctx.fillStyle = status ? ALIVE_CELL : DEAD_CELL;\r\n        this.ctx.fillRect(x, y, size, size);\r\n    }\r\n}\r\n\r\nexport default GameUI;\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui.js","class GameCore {\r\n    constructor(options) {\r\n        this.row = options.row || 40;\r\n        this.col = options.col || 60;\r\n        this.cells = initCells(this.row, this.col);\r\n    }\r\n\r\n    // Return a cell object at the row and column\r\n    getCellAt (r, c) {\r\n        return this.cells[r * this.col + c];\r\n    }\r\n\r\n    // Give each cell a random living status\r\n    randomPattern () {\r\n        for (let r = 0; r < this.row; r++) {\r\n            for (let c = 0; c < this.col; c++) {\r\n                let tile = this.getCellAt(r, c);\r\n                tile.alive = randomStatus();\r\n                tile.next = tile.alive;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Loop throughs all cells to generate next status\r\n    populate () {\r\n        for (let r = 0; r < this.row; r++) {\r\n            for (let c = 0; c < this.col; c++) {\r\n                let cell = this.getCellAt(r, c);\r\n                if (cell) {\r\n                    cell.next = this._nextStatus(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // switch cell's living status to next generation\r\n    nextGen (cell) {\r\n        if (cell && cell.hasOwnProperty('alive') && cell.hasOwnProperty('next')) {\r\n            cell.alive = cell.next;\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    // generate next living status for the given cell based on game rules\r\n    _nextStatus(cell) {\r\n        let next = false;\r\n        // Count alive neighbors\r\n        let aliveNeighbors = this._isCellAlive(cell.row - 1, cell.col - 1) +\r\n                             this._isCellAlive(cell.row - 1, cell.col)     +\r\n                             this._isCellAlive(cell.row - 1, cell.col + 1) +\r\n                             this._isCellAlive(cell.row, cell.col - 1)     +\r\n                             this._isCellAlive(cell.row, cell.col + 1)     +\r\n                             this._isCellAlive(cell.row + 1, cell.col - 1) +\r\n                             this._isCellAlive(cell.row + 1, cell.col)     +\r\n                             this._isCellAlive(cell.row + 1, cell.col + 1);\r\n        if (cell.alive) {\r\n            next = aliveNeighbors === 2 || aliveNeighbors === 3;\r\n        } else {\r\n            next = aliveNeighbors === 3;\r\n        }\r\n        return next;\r\n    }\r\n\r\n    // Return true if the cell at the given row and column is alive\r\n    _isCellAlive(r, c) {\r\n        let cell = this.getCellAt(r, c);\r\n        if (cell) {\r\n            return cell.alive;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// private functions\r\nfunction initCells(row, col) {\r\n    let cells = [];\r\n    for (let r = 0; r < row; r++) {\r\n        for (let c = 0; c < col; c++) {\r\n            cells.push({\r\n                alive: false,\r\n                next: false,\r\n                row: r,\r\n                col: c\r\n            });\r\n        }\r\n    }\r\n\r\n    return cells;\r\n}\r\n\r\n\r\nfunction randomStatus () {\r\n    return !!Math.round(Math.random());\r\n}\r\n\r\nexport default GameCore;\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/game.js"],"sourceRoot":""}